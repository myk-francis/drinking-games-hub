// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    Int     @id @default(autoincrement())
  username String  @unique
  passcode  String
  active  Boolean @default(true)
  sessions Session[]
}

model Game {
  id        Int     @id @default(autoincrement())
  code      String
  name     String
  description   String
  questions Question[]
  rooms    Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        Int     @id @default(autoincrement())
  text      String
  gameId    Int
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        String    @id @default(uuid())
  gameId    Int
  gameEnded Boolean @default(false)
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  players   Player[]
  currentPlayerId String?
  previousPlayersIds String[]
  currentQuestionId Int?
  previousQuestionsId Int[]
  currentCard Int? @default(0)
  lastCard Int? @default(500)
  lastPlayerId String?
  previousCards Int[] @default([500])
  correctPrediction Boolean @default(false)
  createdById Int 
  rounds Int @default(0)
  currentRound Int? @default(0)
  startedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id        String    @id @default(uuid())
  name      String
  points    Int?
  drinks    Int?
  roomId    String
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Session {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Parms {
  id        Int   @id @default(autoincrement())
  type      String
  name      String
  value     Int
  createdAt DateTime @default(now())
}

